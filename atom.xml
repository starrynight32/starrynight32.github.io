<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://starrynight32.github.io</id>
    <title>StarryNight_32</title>
    <updated>2020-11-24T12:02:47.218Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://starrynight32.github.io"/>
    <link rel="self" href="https://starrynight32.github.io/atom.xml"/>
    <subtitle>我想去远方，可远方太远&lt;br&gt;我想伏地生活，但心有不安&lt;br&gt;我想在迷雾中穿行&lt;br&gt;我不知道我会成为什么人，但我知道我不能成为什么人&lt;br&gt;我只是要拒绝庸常</subtitle>
    <logo>https://starrynight32.github.io/images/avatar.png</logo>
    <icon>https://starrynight32.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, StarryNight_32</rights>
    <entry>
        <title type="html"><![CDATA[Leb128 数据类型]]></title>
        <id>https://starrynight32.github.io/post/leb128-shu-ju-lei-xing/</id>
        <link href="https://starrynight32.github.io/post/leb128-shu-ju-lei-xing/">
        </link>
        <updated>2020-11-24T10:51:56.000Z</updated>
        <content type="html"><![CDATA[<h1 id="leb128-数据类型">Leb128 数据类型</h1>
<p>在安卓系统源码 <code>/dalvik/libdex/Leb128.h</code> 中，对 Leb128 数据类型进行了一个解析，我们先看源代码（无符号）👇：</p>
<pre><code class="language-c">DEX_INLINE int readUnsignedLeb128(const u1** pStream) {
    const u1* ptr = *pStream;
    int result = *(ptr++);

    if (result &gt; 0x7f) {
        int cur = *(ptr++);
        result = (result &amp; 0x7f) | ((cur &amp; 0x7f) &lt;&lt; 7);
        if (cur &gt; 0x7f) {
            cur = *(ptr++);
            result |= (cur &amp; 0x7f) &lt;&lt; 14;
            if (cur &gt; 0x7f) {
                cur = *(ptr++);
                result |= (cur &amp; 0x7f) &lt;&lt; 21;
                if (cur &gt; 0x7f) {
                    /*
                     * Note: We don't check to see if cur is out of
                     * range here, meaning we tolerate garbage in the
                     * high four-order bits.
                     */
                    cur = *(ptr++);
                    result |= cur &lt;&lt; 28;
                }
            }
        }
    }

    *pStream = ptr;
    return result;
}
</code></pre>
<p>Leb128 类型数据在安卓中只用来编译 <strong>32 bit</strong> 的整形，但是一个 Leb128 类型的数据最长占用可以达到 <strong>5 个字节</strong>，这也就意味着有 <strong>8 bit 的数据是要舍弃的数据</strong>（每字节占 8 bit），这在解析算法中有体现，让我们回到源码中来</p>
<p>从头开始说起，作为传参的 pStream 即文件二进制流，发现是一个二级指针，实际上这里传入的会是 Leb128 类型的二进制流，也就是一串 01 流</p>
<figure data-type="image" tabindex="1"><img src="https://starrynight-32.oss-cn-shenzhen.aliyuncs.com/image/image-20201109170801731.png" alt="image-20201109170801731" loading="lazy"></figure>
<p>我们假设一下输入的比特流为：</p>
<p>“1111 1111 1011 0111 1101 1011 1110 1101 1100 1110 0110 1111”</p>
<p>这里总共有 48 bit ，也就是 6 个字节，可以发现<strong>前面 5 个字节第一个 bit 都是 1</strong>，这是因为 <strong>Leb128 用第一个 bit 标识一个 Leb128 是否结束</strong>，也就是说，<strong>如果一个字节还是 Leb128 中间的数据的话，一定会大于 0111 1111 ，换算为 16 进制也就是 0x7F</strong>。</p>
<figure data-type="image" tabindex="2"><img src="https://starrynight-32.oss-cn-shenzhen.aliyuncs.com/image/image-20201109172854967.png" alt="image-20201109172854967" loading="lazy"></figure>
<p>让我们先从前 7 行开始分析，在第一行中通过一个二级指针具体的指向了<strong>内存中的位置</strong>，在我们的案例中 bit 串中第一个字节 “1111 1111” 中第一个 “1” 所在的内存地址，就是这个二级指针指向的位置。</p>
<p>在第二行中，定义了一个 u1 类型的指针 ptr ，那 u1 类型又是什么类型呢，它等同于 uint8_t 类型，也就是一个<strong>无符号的 1 字节数</strong>，那又有可爱的小朋友问了，“那 uint8_t 类型又是什么呢？”。在 C 语言中，有后缀 “_t” 的，一般代指由 typedef 定义的别名，而 uint8_t 的定义是 <code>typedef unsigned int uint8_t</code> ，这样是不是好理解多了，其实就是一个<strong>无符号整型</strong>。所以这里指针的意思可以理解为每一个字节开始的位置，也就是说，<strong>如果指针+1，则会直接指向下一个字节，而不是下一个 bit</strong>。</p>
<p>第三行在看懂第二行的情况下就很好理解了，<strong>result 就是 01 串具体的值</strong>，例如在案例中，这里就是 （1111 1111）B。而 ptr++ ，C 语言自加规则先用后加，也就是说如果下次还有这个赋值的话，result 应该就是第二个字节的内容了，也就是 （1011 0111）B。</p>
<p>第五行其实刚刚已经解释过了，这里就是在<strong>判断第二个字节是否是以 '1' 作为第一个 bit</strong>，如果是则说明还在这个 Leb128 的范围内，还要继续操作，否则说明已经不是这个 Leb128 类型的数了。</p>
<p>第六行其实就是第三行的复制，不过因为最后 return 结果是 result ，所以作为结果的 result 需要将第二个字节的内容也读到，就不能干处理指针这种杂活了。</p>
<p>重点来了，第七行，这一行是该解析算法的关键，虽然从明面上来看应该从<code>位或符号（|）</code> 拆成两部分来看会比较好，但是实际上位或符号在这里只起到一个拼接的作用，为什么这么说呢？注意后面的<code>位移符号（&lt;&lt;）</code>，在这里<strong>左移了 7 位</strong>，这也就意味着<strong>第二个字节右边多出来了 7 个bit 的 0</strong>，这意味着什么呢，结合<code>位或</code>来看的话，这就意味着<strong>左边后 7 位可以直接拼接到右边去</strong>，因为在<code>位或</code>运算中，0的位或只取决于要运算的那个数，也就是说是0还是0，是1还是1。也就是说<strong>第一个字节后 7 位直接接到了第二个字节的后面</strong>，而 Leb128 类型的字节中，<strong>第一个 bit 是用于标识是否还在 Leb128 范围内，所以第一个 bit 自然是可以省略的！</strong></p>
<p>当然这只是粗略扫了一眼，当然不能直接作为结论来用，重新看到在位或符号左右都出现了的 <code>&amp;0x7f</code> ，我们 0x7f 是不是很眼熟，但是这里用处并不一样，0x7f=（0111 1111）B，而结合位于运算来看的话，这就是<strong>将第 1 个 bit 直接归零，而后面 7 个bit任然保持原状</strong>，是不是跟我们的猜测一模一样，第一个 bit 直接在 <code>位或运算</code> 中不起作用，而后 7 位 bit 保留数据，也就是说，在第 7 行之后，result 在我们的示例中变为了 &quot;1011 0111 111 1111&quot; ，拼接中删去了第一个字节的标识位。</p>
<p>当理解这里之后只存在唯一的疑问了，如果五个字节中有四个字节都删去了第一位的标识位，按理来说应当只删去了 4 个bit，那应该保留的 bit 会有 36 位，那还有 4位去哪了呢？</p>
<p>这个问题在最后一个 if 中得到了解答：</p>
<figure data-type="image" tabindex="3"><img src="https://starrynight-32.oss-cn-shenzhen.aliyuncs.com/image/image-20201109182308942.png" alt="image-20201109182308942" loading="lazy"></figure>
<p>正如注释中说的一样，在这里我们没有在乎最后一位是否符合标准，因为最高地址的4位都会被删去，也就是说虽然 36 位是 result 的最终返回结果，但是因为只接受 32 bit ，所以高地址 4 位不会被接收（可以理解为一个 char str[32]）</p>
<p>最终完美符合我们的预期，即前 4 个字节的第 1 个 bit 被删除，第 5 个字节前 4 位 bit 被忽略：</p>
<figure data-type="image" tabindex="4"><img src="https://starrynight-32.oss-cn-shenzhen.aliyuncs.com/image/image-20201109190511328.png" alt="image-20201109190511328" loading="lazy"></figure>
]]></content>
    </entry>
</feed>